# SPDX-FileCopyrightText: 2024 Thomas Mathys
# SPDX-License-Identifier: MIT

function(vtg_target_enable_warnings target)

  if(CMAKE_CXX_COMPILER_ID MATCHES "Clang")
    # Using -Weverything is not recommended by clang developers, see
    # https://quuxplusone.github.io/blog/2018/12/06/dont-use-weverything
    # We start out with it anyway and see how it goes.
    target_compile_options(${target} PRIVATE -Werror)
    target_compile_options(${target} PRIVATE -Weverything)
    target_compile_options(${target} PRIVATE -Wno-c++20-compat)
    target_compile_options(${target} PRIVATE -Wno-c++98-compat)
    target_compile_options(${target} PRIVATE -Wno-c++98-compat-bind-to-temporary-copy)
    target_compile_options(${target} PRIVATE -Wno-c++98-compat-pedantic)
    target_compile_options(${target} PRIVATE -Wno-ctad-maybe-unsupported)
    target_compile_options(${target} PRIVATE -Wno-padded)
    target_compile_options(${target} PRIVATE -Wno-switch-default)
    target_compile_options(${target} PRIVATE -Wno-unsafe-buffer-usage)
    target_compile_options(${target} PRIVATE -Wno-weak-vtables)
  endif()

  if(CMAKE_CXX_COMPILER_ID MATCHES "GNU")
    # General warning options (https://gcc.gnu.org/onlinedocs/gcc/Warning-Options.html)
    target_compile_options(${target} PRIVATE -Werror)
    target_compile_options(${target} PRIVATE -Wall)
    target_compile_options(${target} PRIVATE -Wextra)
    target_compile_options(${target} PRIVATE -Wpedantic)
    target_compile_options(${target} PRIVATE -Walloca)
    target_compile_options(${target} PRIVATE -Walloc-zero)
    target_compile_options(${target} PRIVATE -Wcast-align=strict)
    target_compile_options(${target} PRIVATE -Wcast-qual)
    target_compile_options(${target} PRIVATE -Wdisabled-optimization)
    target_compile_options(${target} PRIVATE -Wdouble-promotion)
    target_compile_options(${target} PRIVATE -Wduplicated-branches)
    target_compile_options(${target} PRIVATE -Wduplicated-cond)
    target_compile_options(${target} PRIVATE -Wfloat-equal)
    target_compile_options(${target} PRIVATE -Wformat=2)
    target_compile_options(${target} PRIVATE -Winit-self)
    target_compile_options(${target} PRIVATE -Winvalid-pch)
    target_compile_options(${target} PRIVATE -Wlogical-op)
    target_compile_options(${target} PRIVATE -Wmissing-declarations)
    target_compile_options(${target} PRIVATE -Wmissing-include-dirs)
    target_compile_options(${target} PRIVATE -Wnull-dereference)
    target_compile_options(${target} PRIVATE -Wpointer-arith)
    target_compile_options(${target} PRIVATE -Wredundant-decls)
    target_compile_options(${target} PRIVATE -Wshift-overflow=2)
    target_compile_options(${target} PRIVATE -Wsign-conversion)
    target_compile_options(${target} PRIVATE -Wswitch-enum)
    target_compile_options(${target} PRIVATE -Wtrampolines)
    target_compile_options(${target} PRIVATE -Wundef)
    target_compile_options(${target} PRIVATE -Wvector-operation-performance)
    target_compile_options(${target} PRIVATE -Wwrite-strings)
    # C++ dialect options (https://gcc.gnu.org/onlinedocs/gcc/C_002b_002b-Dialect-Options.html)
    target_compile_options(${target} PRIVATE -Wctor-dtor-privacy)
    target_compile_options(${target} PRIVATE -Wold-style-cast)
    target_compile_options(${target} PRIVATE -Woverloaded-virtual)
    target_compile_options(${target} PRIVATE -Wstrict-null-sentinel)
    target_compile_options(${target} PRIVATE -Wsuggest-final-methods)
    target_compile_options(${target} PRIVATE -Wsuggest-final-types)
    target_compile_options(${target} PRIVATE -Wsuggest-override)
    target_compile_options(${target} PRIVATE -Wunsafe-loop-optimizations)
    target_compile_options(${target} PRIVATE -Wuseless-cast)
    target_compile_options(${target} PRIVATE -Wzero-as-null-pointer-constant)
  endif()

  if(MSVC)
    target_compile_options(${target} PRIVATE /WX)
    target_compile_options(${target} PRIVATE /W4)
  endif()

endfunction()
